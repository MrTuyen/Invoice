; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Plugin"
#define MyAppVersion "1.0.1.2"
#define MyAppPublisher ""
#define MyAppURL ""
#define MyAppExeName "Plugin.exe"
#define MyCopyright "Copyright © 2019"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C99D9BB4-1406-4E24-A5B9-1B9EF34E9470}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename={#MyAppName}_Setup_{#MyAppVersion}
UninstallDisplayName={#MyAppName}
Compression=lzma
SolidCompression=yes
OutputDir = Setup Files
[Code]
procedure TaskKill(FileName: String);
var
  ResultCode: Integer;
begin
    Exec(ExpandConstant('taskkill.exe'), '/f /im ' + '"' + FileName + '"', '', SW_HIDE,
     ewWaitUntilTerminated, ResultCode);
end; 
procedure MessageAferInstall();         
begin
  
end;     

procedure CreateTaskXml;
var
  TaskXml: string;
begin
  TaskXml :=
    '<?xml version="1.0"?>' + #13#10 +
    '<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">'
      + #13#10 +
    '  <Triggers>' + #13#10 +
    '    <LogonTrigger>' + #13#10 +
    '      <StartBoundary>2017-01-01T10:10:00</StartBoundary>' + #13#10 +
    '      <Enabled>true</Enabled>' + #13#10 +
    '    </LogonTrigger>' + #13#10 +
    '  </Triggers>' + #13#10 +
    '  <Principals>' + #13#10 +
    '    <Principal id="Author">' + #13#10 +
    '      <RunLevel>HighestAvailable</RunLevel>' + #13#10 +
    '    </Principal>' + #13#10 +
    '  </Principals>' + #13#10 +
    '  <Settings>' + #13#10 +
    '    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>' + #13#10 +
    '    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>' + #13#10 +
    '    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>' + #13#10 +
	'    <AllowHardTerminate>true</AllowHardTerminate>' + #13#10 +
    '    <StartWhenAvailable>true</StartWhenAvailable>' + #13#10 +
    '    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>' + #13#10 +
    '    <IdleSettings>' + #13#10 +
    '      <StopOnIdleEnd>true</StopOnIdleEnd>' + #13#10 +
    '      <RestartOnIdle>false</RestartOnIdle>' + #13#10 +
    '    </IdleSettings>' + #13#10 +
    '    <AllowStartOnDemand>true</AllowStartOnDemand>' + #13#10 +
    '    <Enabled>true</Enabled>' + #13#10 +
    '    <Hidden>false</Hidden>' + #13#10 +
    '    <RunOnlyIfIdle>false</RunOnlyIfIdle>' + #13#10 +
    '    <ExecutionTimeLimit>PT0S</ExecutionTimeLimit>' + #13#10 +
    '    <Priority>7</Priority>' + #13#10 +
    '  </Settings>' + #13#10 +

    '  <Actions Context="Author">' + #13#10 +
    '    <Exec>' + #13#10 +
    '      <Command>"' + ExpandConstant('{app}\Plugin.exe') + '"</Command>' + #13#10 +
    '      <Arguments>/c</Arguments>' + #13#10 +
    '    </Exec>' + #13#10 +
    '  </Actions>' + #13#10 +
    '</Task>' + #13#10;

  if SaveStringToFile(ExpandConstant('{app}\Plugin.xml'), TaskXml, False) then
  begin
    Log('Task XML successfully created');
  end
    else
  begin
    Log('Failed to create task XML');
  end;
end;

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Registry] 
Root: HKCU; Subkey: "Software\Plugin"; Flags: uninsdeletekey; ValueType: string; ValueName: "version"; ValueData: {#MyAppVersion};
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; Flags: uninsdeletekey; ValueType: string; ValueName: "Plugin";ValueData: "{app}\{#MyAppExeName}"; OnlyBelowVersion: 0,6.01

[Files]
Source: "Plugin\*"; DestDir: "{app}"; Flags: ignoreversion; BeforeInstall: TaskKill('Plugin.exe')    
Source: "Config\*"; DestDir: "{userappdata}\Plugin Log"; Flags: ignoreversion; BeforeInstall: TaskKill('Plugin.exe')     
[Icons]
;Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
;Name: "{userstartup}\My Program"; Filename: "{app}\Plugin.exe"; Tasks:StartMenuEntry;
Name: "{userstartup}\{#MyAppExeName}"; Filename: "{app}\{#MyAppExeName}";
Name: "{commonstartup}\{#MyAppExeName}"; Filename: "{app}\{#MyAppExeName}";

[Run]
;Filename: "{app}\Config.exe"; Parameters: /passive /norestart
Filename: "{app}\{#MyAppExeName}"; Flags: nowait skipifsilent; AfterInstall: MessageAferInstall;
Filename: "schtasks.exe"; \
    Parameters: "/Create /TN ""CMC Plugin 1"" /IT /F /XML ""{app}\Plugin.xml"""; \
    StatusMsg: "Scheduling task..."; BeforeInstall: CreateTaskXml
     ;Flags: runhidden;

;Filename: "schtasks.exe"; \
;    Parameters: "/Create /TN ""CMC Plugin 1"" /IT /F /XML ""{app}\Plugin.xml"""; \
;    StatusMsg: "Scheduling task..."

