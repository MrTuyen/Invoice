(function ($) {
    var rEscape = /[\-\[\]{}()*+?.,\\\^$|#\s]/g; $.widget('ech.multiselectfilter', {
        options: { label: '', width: null, placeholder: 'Nhập từ khóa cần tìm', autoReset: !1 }, _create: function () { var opts = this.options; var elem = $(this.element); var instance = (this.instance = (elem.data('echMultiselect') || elem.data("multiselect") || elem.data("ech-multiselect"))); var header = (this.header = instance.menu.find('.ui-multiselect-header').addClass('ui-multiselect-hasfilter')); var wrapper = (this.wrapper = $('<div class="ui-multiselect-filter">' + (opts.label.length ? opts.label : '') + '<input placeholder="' + opts.placeholder + '" type="search"' + (/\d/.test(opts.width) ? 'style="width:' + opts.width + 'px"' : '') + '/></div>').prependTo(this.header)); this.inputs = instance.menu.find('input[type="checkbox"], input[type="radio"]'); this.input = wrapper.find('input').bind({ keydown: function (e) { if (e.which === 13) { e.preventDefault() } }, keyup: $.proxy(this._handler, this), click: $.proxy(this._handler, this) }); this.updateCache(); instance._toggleChecked = function (flag, group) { var $inputs = (group && group.length) ? group : this.labels.find('input'); var _self = this; var selector = instance._isOpen ? ':disabled, :hidden' : ':disabled'; $inputs = $inputs.not(selector).each(this._toggleState('checked', flag)); this.update(); var values = $inputs.map(function () { return this.value }).get(); this.element.find('option').filter(function () { if (!this.disabled && $.inArray(this.value, values) > -1) { _self._toggleState('selected', flag).call(this) } }); if ($inputs.length) { this.element.trigger('change') } }; var doc = $(document).bind('multiselectrefresh', $.proxy(function () { this.updateCache(); this._handler() }, this)); if (this.options.autoReset) { doc.bind('multiselectclose', $.proxy(this._reset, this)) } }, _handler: function (e) {
            var term = $.trim(this.input[0].value.toLowerCase()), rows = this.rows, inputs = this.inputs, cache = this.cache; if (!term) { rows.show() } else {
                rows.hide(); var regex = new RegExp(term.replace(rEscape, "\\$&"), 'gi'); this._trigger("filter", e, $.map(cache, function (v, i) {
                    if (v.search(regex) !== -1 || locdau(v).search(regex) !== -1) { rows.eq(i).show(); return inputs.get(i) }
                    return null
                }))
            }
            this.instance.menu.find(".ui-multiselect-optgroup-label").each(function () { var $this = $(this); var isVisible = $this.nextUntil('.ui-multiselect-optgroup-label').filter(function () { return $.css(this, "display") !== 'none' }).length; $this[isVisible ? 'show' : 'hide']() })
        }, _reset: function () { this.input.val('').trigger('keyup') }, updateCache: function () {
        this.rows = this.instance.menu.find(".ui-multiselect-checkboxes li:not(.ui-multiselect-optgroup-label)"); this.cache = this.element.children().map(function () {
            var elem = $(this); if (this.tagName.toLowerCase() === "optgroup") { elem = elem.children() }
            return elem.map(function () { return this.innerHTML.toLowerCase() }).get()
        }).get()
        }, widget: function () { return this.wrapper }, destroy: function () { $.Widget.prototype.destroy.call(this); this.input.val('').trigger("keyup"); this.wrapper.remove() }
    }); function locdau(str) { str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a"); str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e"); str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i"); str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o"); str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u"); str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y"); str = str.replace(/đ/g, "d"); str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A"); str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E"); str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I"); str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O"); str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U"); str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y"); str = str.replace(/Đ/g, "D"); return str }
})(jQuery)